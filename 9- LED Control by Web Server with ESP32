
#include <WiFi.h>    //  WiFi library 

const char* ssid     = "Hasawas";   // netwrk ssid
const char* password = "0555554444";  // network password


WiFiServer server(80); // Set web server port number to 80


String header; // Variable to store the HTTP request

String led_OneState = "off";  // Auxiliar variables to store the current output state
String led_TwoState = "off";

// Assign output variables to GPIO pins
const int led_One = 18;   //  output , led is connected
const int led_Two = 22;

void setup() {
  Serial.begin(115200);
  // Initialize the output variables as outputs
  pinMode(led_One, OUTPUT);
  pinMode(led_Two, OUTPUT);
  // Set outputs to LOW
  digitalWrite(led_One, LOW);
  digitalWrite(led_Two, LOW);

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);   //  start connection with WiFi
  while (WiFi.status() != WL_CONNECTED) {       //  waiting for complete the connectivity
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());   // IP address print on serial monitor
  server.begin();   // start the server
}

void loop(){
  WiFiClient client = server.available();   

  if (client) {                             
    Serial.println("New Client.");         
    String currentLine = "";                
    while (client.connected()) {            
      if (client.available()) {          
        char c = client.read();             
        Serial.write(c);                    
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            // turns the GPIOs on and off
            if (header.indexOf("GET /18/on") >= 0) {
              Serial.println("led_One on");
              led_OneState = "on";
              digitalWrite(led_One, HIGH);
            } else if (header.indexOf("GET /18/off") >= 0) {
              Serial.println("led_One off");
              led_OneState = "off";
              digitalWrite(led_One, LOW);
            } else if (header.indexOf("GET /22/on") >= 0) {
              Serial.println("led_Two on");
              led_TwoState = "on";
              digitalWrite(led_Two, HIGH);
            } else if (header.indexOf("GET /22/off") >= 0) {
              Serial.println("led_Two off");
              led_TwoState = "off";
              digitalWrite(led_Two, LOW);
            }
            
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 2px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #FF0000;}</style></head>");
            
            // Web Page Heading
            
            client.println("<body><h1>ESP32 Web Server</h1>");
            client.println("<body><h2>void loop Robotech & Automation</h2>");
            // Display current state, and ON/OFF buttons for LED_ONE  
            client.println("<p>led_One - State " + led_OneState + "</p>");
            // If the led_OneState is off, it displays the ON button       
            if (led_OneState=="off") {
              client.println("<p><a href=\"/18/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/18/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 
               
            // Display current state, and ON/OFF buttons for led_Two  
            client.println("<p>led_Two - State " + led_TwoState + "</p>");
            // If the led_TwoState is off, it displays the ON button       
            if (led_TwoState=="off") {
              client.println("<p><a href=\"/22/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/22/off\"><button class=\"button button2\">OFF</button></a></p>");
            }
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
